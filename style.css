/* 
Color pallete. This section defines variables for the color pallete,
so that we can refer to particular colors by name instead of hexadecimal values.
This is applied to the 'root' psuedo-element, which just means that these color
variables are available to be used anywhere in our html document
*/
:root {
    --white-font: #edf6f9;
    --light_pink: #ffddd2;
    --dark_pink: #e29578;
    --light_blue-font: #83c5be;
    --dark_blue-font: #006d77;
}

.fullscreen-photo {
    position: relative;
    width: 100%;
    height: 100vh; /* Use viewport height instead of 100% */
    display: flex;
    justify-content: center;
    align-items: center;
    overflow: hidden; /* Hide overflow to prevent scrollbar on the photo */
}

.fullscreen-photo img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    color: white;
    text-align: center;
    padding: 20px;
}

.overlay h1 {
    font-size: 4rem;
    margin-bottom: 10px;
}

.overlay p {
    font-size: 1.2rem;
    margin: 48px;
}

/* Defines the main container size, we are limiting to 72em max and centring in the viewport */
.main-container {
    max-width: 72em;
    margin: 0 auto;
    font-family: Inter;
    text-align: center;
    color:var(--white-font);
}

.banner {
    color: var(--light_pink);
    background-color: var(--light_blue-font);
    text-align: center;
    font-size: 4em;
}

.generated-image {
    background-color: var(--dark_pink);
    display: flex;
    flex-direction: column;
}

.generated-image-noText{
    display: flex;
    flex-direction: column;
}

.generated-text{
    background-color: var(--dark_pink);
    display: flex;
    flex-direction: column;
}

/* this is the equivalent of setting the image rectangle to "Fill Container" in Figma */ 
.generated-image-image {
    width: 100%;
}

.generated-image-blurb {
    padding: 8px;
}

#banner1 {
    grid-area: ba1;
}

#banner2 {
    grid-area: ba2;
}

#banner3 {
    grid-area: ba3;
}

#generated2 {
    grid-area: gd2;
}

#generated3 {
    grid-area: gd3;
}
#generated4 {
    grid-area: gd4;
}
#generated5 {
    grid-area: gd5;
}
#generated6 {
    grid-area: gd6;
}
#generated7 {
    grid-area: gd7;
}
#generatedT {
    grid-area: gdT;
}
#generated8 {
    grid-area: gd8;
}
#generated9 {
    grid-area: gd9;
}

/* Use a flexible layout grid */
.main-container {
    display: grid;
    column-gap: 1em;
}
  
/* 
Responsive Layout breakpoints. We start 'mobile-first' i.e. we define how the layout should look
for the smallest screen sizes. In this case we want a single column that spans the main container.
Because this CSS definition comes first, it will apply by default. Then we override it below with 
media queries for progressively bigger screen widths
*/
.main-container {
    grid-template:
    "  .  .  .  .   " minmax(4em, auto)
    "ba1 ba1 ba1 ba1" minmax(4em, auto)
    "  .  .  .  .   " minmax(2em, auto)
    "gd2 gd2 gd2 gd2" minmax(30em, auto)
    "  .  .  .  .   " minmax(2em, auto)
    "gd3 gd3 gd3 gd3" minmax(30em, auto)
    "  .  .  .  .   " minmax(2em, auto)
    "gd4 gd4 gd4 gd4" minmax(30em, auto)
    "  .  .  .  .   " minmax(4em, auto)
    "ba2 ba2 ba2 ba2" minmax(4em, auto)
    "  .  .  .  .   " minmax(2em, auto)
    "gd5 gd5 gd5 gd5" minmax(30em, auto)
    "  .  .  .  .   " minmax(2em, auto)
    "gd6 gd6 gd6 gd6" minmax(30em, auto)
    "  .  .  .  .   " minmax(2em, auto)
    "gd7 gd7 gd7 gd7" minmax(30em, auto)
    "  .  .  .  .   " minmax(2em, auto)
    "gdT gdT gdT gdT" minmax(30em, auto)
    "  .  .  .  .   " minmax(4em, auto)
    "ba3 ba3 ba3 ba3" minmax(4em, auto)
    "  .  .  .  .   " minmax(2em, auto)
    "gd8 gd8 gd8 gd8" minmax(30em, auto)
    "  .  .  .  .   " minmax(2em, auto)
    "gd9 gd9 gd9 gd9" minmax(30em, auto)
}

@media (min-width: 50em) {
    .main-container {
        grid-template:
        "    .  .  .  .   .  .  .  .    " minmax(4em, auto)
        "ba1 ba1 ba1 ba1 ba1 ba1 ba1 ba1" minmax(4em, auto)
        "    .  .  .  .   .  .  .  .    " minmax(1em, auto)
        "gd2 gd2 gd2 gd2 gd3 gd3 gd3 gd3" minmax(30em, auto)
        "    .  .  .  .   .  .  .  .    " minmax(2em, auto)
        "gd4 gd4 gd4 gd4 gd4 gd4 gd4 gd4" minmax(30em, auto)
        "    .  .  .  .   .  .  .  .    " minmax(4em, auto)
        "ba2 ba2 ba2 ba2 ba2 ba2 ba2 ba2" minmax(4em, auto)
        "    .  .  .  .   .  .  .  .    " minmax(2em, auto)
        "gd5 gd5 gd5 gd5 gd6 gd6 gd6 gd6" minmax(30em, auto)
        "    .  .  .  .   .  .  .  .    " minmax(2em, auto)
        "gd7 gd7 gd7 gd7 gdT gdT gdT gdT" minmax(30em, auto)
        "    .  .  .  .   .  .  .  .    " minmax(4em, auto)
        "ba3 ba3 ba3 ba3 ba3 ba3 ba3 ba3" minmax(4em, auto)
        "    .  .  .  .   .  .  .  .    " minmax(2em, auto)
        "gd8 gd8 gd8 gd8 gd9 gd9 gd9 gd9" minmax(30em, auto)
        "    .  .  .  .   .  .  .  .    " minmax(2em, auto)
    }
}

@media (min-width: 75em) {
    .main-container {
        grid-template:
        "      .  .  .  .   .  .  .  .  .  .  .  .      " minmax(4em, auto)
        "ba1 ba1 ba1 ba1 ba1 ba1 ba1 ba1 ba1 ba1 ba1 ba1" minmax(4em, auto)
        "      .  .  .  .   .  .  .  .  .  .  .  .      " minmax(1em, auto)
        "gd2 gd2 gd2 gd2 gd3 gd3 gd3 gd3 gd4 gd4 gd4 gd4" minmax(30em, auto)
        "      .  .  .  .   .  .  .  .  .  .  .  .      " minmax(4em, auto)
        "ba2 ba2 ba2 ba2 ba2 ba2 ba2 ba2 ba2 ba2 ba2 ba2" minmax(4em, auto)
        "      .  .  .  .   .  .  .  .  .  .  .  .      " minmax(1em, auto)
        "gd5 gd5 gd5 gd5 gd6 gd6 gd6 gd6 gd7 gd7 gd7 gd7" minmax(30em, auto)
        "      .  .  .  .   .  .  .  .  .  .  .  .      " minmax(2em, auto)
        "gdT gdT gdT gdT gdT gdT gdT gdT gdT gdT gdT gdT" minmax(16em, auto)
        "      .  .  .  .   .  .  .  .  .  .  .  .      " minmax(4em, auto)
        "ba3 ba3 ba3 ba3 ba3 ba3 ba3 ba3 ba3 ba3 ba3 ba3" minmax(4em, auto)
        "      .  .  .  .   .  .  .  .  .  .  .  .      " minmax(1em, auto)
        "gd8 gd8 gd8 gd8 gd8 gd8 gd9 gd9 gd9 gd9 gd9 gd9" minmax(30em, auto)
        "      .  .  .  .   .  .  .  .  .  .  .  .      " minmax(2em, auto)
    }
}